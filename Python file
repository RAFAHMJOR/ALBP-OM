## import the required package
from docplex.mp.model import Model
 
## define the inputs
task_name = ['A','B', 'C', 'D', 'E','F1', 'G1','H1','I1','J1','K1',  'F2','G2','H2','I2','J2', 'K2' ]
Tt = [45,  11,  9,  50 , 15 , 11,  10,   9,  8, 7, 8, 13,  14,  15,  16,   9, 15  ]
pred_i_j =  [[],  [0], [1], [], [3], [2], [2], [4], [4], [5,6,7,8],[9],   [2], [2], [4], [4], [11,12,13,14],[15] ]
N_S_1=[0,1,2,3,4,5,6,7,8,9,10] # set of tasks' indices related to Scenario number 1
N_S_2=[0,1,2,3,4,11,12,13,14,15,16] # set of tasks' indices related to Scenario number 2
WS_num=range(11) # maximum number of workstation
T_num_2s=range(17) # number of tasks including the both scenarios
ct=50 # the maximum theoretical cycle time
 
## name the model
tm = Model(name="ALBP Two Stages Model")
 
## define the model variable
x = [[tm.binary_var(name=task_name[i]+'_' +str(j+1)) for j in WS_num] for i in T_num_2s]  # 1 if task i assigned to station j else 0
y = [tm.binary_var(name='machine'+str(j+1)) for j in WS_num] #1 if station j selected else 0
 
## define the constraints
# constraints number 1
tm.add_constraints((tm.sum(x[i][j] for j in WS_num) == 1) for i in T_num_2s)
# constraints 2
tm.add_constraints((tm.sum(x[i][j] * Tt[i] for i in N_S_1) <= ct * y[j]) for j in WS_num)
tm.add_constraints((tm.sum(x[i][j] * Tt[i] for i in N_S_2) <= ct * y[j]) for j in WS_num)
# constraints 3
for i in T_num_2s:tm.add_constraints(tm.sum(x[h][j] * j  for j in WS_num) <= tm.sum(x[i][j] * j for j in WS_num) for h in pred_i_j[i])
 
## define the objective function
tm.minimize(tm.sum( y[j]  for j in WS_num))
 
## solve the model
tm.solve()
 
## print the solution
print(tm.export_as_lp_string())
tm.print_solution()
